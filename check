from pysnmp.hlapi import *
import ipaddress

def check_snmp_community_and_write_permission(ip, community):
    # Verifica se a community SNMP está configurada
    snmp_engine = SnmpEngine()
    community_data = CommunityData(community)
    transport_target = UdpTransportTarget((ip, 161))
    object_type = ObjectType(ObjectIdentity('1.3.6.1.2.1.1.1.0'))  # OID para sysDescr

    try:
        errorIndication, errorStatus, errorIndex, varBinds = next(
            getCmd(snmp_engine, community_data, transport_target, ContextData(), object_type)
        )

        if errorIndication:
            print(f"Erro ao verificar comunidade SNMP: {errorIndication}")
            return False
        elif errorStatus:
            print(f"Erro de status: {errorStatus.prettyPrint()}")
            return False
        else:
            print(f"Comunidade SNMP '{community}' está configurada no switch.")
    except Exception as e:
        print(f"Exceção ao verificar comunidade SNMP: {str(e)}")
        return False

    # Verifica se a comunidade SNMP tem permissão de escrita
    object_type = ObjectType(ObjectIdentity('1.3.6.1.2.1.1.5.0'), 'Test Write')  # OID hostname	
	

    try:
        errorIndication, errorStatus, errorIndex, varBinds = next(
            setCmd(snmp_engine, community_data, transport_target, ContextData(), object_type)
        )

        if errorIndication:
            print(f"Erro ao verificar permissão de escrita: {errorIndication}")
            return False
        elif errorStatus:
            print(f"Erro de status: {errorStatus.prettyPrint()}")
            return False
        else:
            print("Permissão de escrita SNMP verificada com sucesso.")
            return True
    except Exception as e:
        print(f"Exceção ao verificar permissão de escrita: {str(e)}")
        return False
		
def listar_ips_da_rede(rede):
    try:
        # Cria um objeto de rede IPv4
        rede_ipv4 = ipaddress.ip_network(rede)
        
        # Verifica se a rede é /16
        if rede_ipv4.prefixlen != 16:
            print("Por favor, forneça uma rede /16.")
            return
        
        # Gera todos os endereços IP da rede
        ips = [str(ip) for ip in rede_ipv4.hosts()]
        
        return ips
    except ValueError as e:
        print(f"Erro: {e}")
        return []

# Rede /16 de exemplo
rede = '192.168.0.0/16'

ips = ips_rede(rede)

ip_switch = '192.168.1.1'  # Substitua pelo IP do seu switch
community_snmp = 'public'


for ip in ips:
	if check_snmp_community_and_write_permission(ip, community_snmp):
		print(ip)
	else:
		
